%{
 (* File Parser.FSy 
    Parser for F# type expression sublanguage

    To be completed
  *)

 open Absyn;
%}

%token <int> NAT 
%token <string> NAME

%token IF
%token THEN
%token ELSE
%token NOT
%token HD
%token TL 
%token ISE
%token PRINT
%token PLUS
%token MINUS
%token MULT
%token DIV
%token EQUAL
%token NEQUAL
%token LESSTHAN
%token LESSTHANEQ
%token APPEND
%token SEMICOL
%token LOCAL
%token IN
%token END
%token FN
%token ANONPTR
%token LPAR
%token RPAR
%token EMPTYLIST
%token COL
%token VAR
%token FUN
%token REC
%token UNIT
%token BOOL
%token INT
%token ARROW
%token LIST
%token TRUE
%token FALSE
%token EOF

%right SEMICOL ARROW
%nonassoc IF
%left ELSE
%left EQUAL NEQUAL
%nonassoc LESSTHAN LESSTHANEQ
%right APPEND 
%left PLUS MINUS
%left MULT DIV
%nonassoc NOT HD TL ISE LIST PRINT FUN

//fix stntax 
%start Main
%type Main Expr AtomicE expr
%type Type htype
%type Bindings binding list
%type Binding binding
%type Const Con
%type TypeName tname
%type AppE 

%%
Main:
	Expr EOF {$1}

Expr:
	  AtomicE						{$1}
	| AppE							{$1}
	| IF Expr THEN Expr ELSE Expr	{(If( $2 , $4 , $6 ), AnyT)}
	| NOT Expr						{(Op1("not", $2 ), BoolT)}
	| HD Expr						{(Op1("hd", $2), AnyT)}
	| TL Expr						{(Op1("tl", $2), ListT(AnyT))}
	| ISE Expr						{(Op1("ise", $2), BoolT}
	| PRINT Expr					{(Op1("print", $2), UnitT)}
	| Expr PLUS Expr				{(Op2("+",$1,$3), IntT)}
	| Expr MINUS Expr				{(Op2("-", $1, $3), IntT)}
	| Expr MULT Expr				{(Op2("*", $1, $3), IntT)}
	| Expr DIV Expr					{(Op2("/", $1, $3), IntT)}
	| Expr EQUAL Expr				{(Op2("=", $1, $3), BoolT)}
	| Expr NEQUAL Expr				{(Op2("<>", $1, $3), BoolT)}
	| Expr LESSTHAN Expr			{(Op2("<", $1, $3), BoolT)}	
	| Expr LESSTHANEQ Expr			{(Op2("<=", $1, $3), BoolT)}
	| Expr APPEND Expr				{(Op2("::", $1, $3), ListT(AnyT)}
	| Expr SEMICOL Expr				{(Op2(";", $1, $3), AnyT)}

AtomicE:
	  Const
	| NAME							{(Var($1), AnyT)}
	| LOCAL Bindings IN Expr END	{ (Let($2 , $4) , AnyT)}
	| FN TypeName ANONPTR Expr END	{(Lam($2, $4), AnyT)}
	| LPAR Expr RPAR				{($1)}
	| LPAR EMPTYLIST COL Type RPAR		{(ElistC, $4)}

Const:
	   NAT							{(Con($1), IntT)}
	 | TRUE							{(Con(1), BoolT)}
	 | FALSE						{(Con(0), BoolT)}
	 | NULL							{(Con(0), UnitT)}

TypeName:
	  LPAR NAME COL Type RPAR		{($2, $4)}


Bindings:
	  Binding						{$1}
	| Binding Bindings	

Binding:
	  VAR NAME EQUAL Expr			{V($2, $4)}
	| FUN NAME TypeName EQUAL Expr	{V($2, (Lam( $3, $4)) }
	| FUN REC NAME TypeName COL Type EQUAL Expr {F($3, $4, $6, $8)}

AppE: 
	  AtomicE AtomicE				{(Call($1, $2), AnyT)}
	| AppE AtomicE					{(Call($1, $2), AnyT)}

Type:
	  UNIT							{UnitT}
	| BOOL							{BoolT}
	| INT							{IntT}
	| Type ARROW Type				{ArrowT($1, $3)}
	| Type LIST						{ListT($1)}
	| LPAR Type RPAR				{($2)}


	 