// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | NULL
  | FALSE
  | TRUE
  | LIST
  | ARROW
  | INT
  | BOOL
  | UNIT
  | REC
  | FUN
  | VAR
  | COL
  | EMPTYLIST
  | RPAR
  | LPAR
  | ANONPTR
  | FN
  | END
  | IN
  | LOCAL
  | SEMICOL
  | APPEND
  | LESSTHANEQ
  | LESSTHAN
  | NEQUAL
  | EQUAL
  | DIV
  | MULT
  | MINUS
  | PLUS
  | PRINT
  | ISE
  | TL
  | HD
  | NOT
  | ELSE
  | THEN
  | IF
  | NAME of (string)
  | NAT of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_NULL
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_LIST
    | TOKEN_ARROW
    | TOKEN_INT
    | TOKEN_BOOL
    | TOKEN_UNIT
    | TOKEN_REC
    | TOKEN_FUN
    | TOKEN_VAR
    | TOKEN_COL
    | TOKEN_EMPTYLIST
    | TOKEN_RPAR
    | TOKEN_LPAR
    | TOKEN_ANONPTR
    | TOKEN_FN
    | TOKEN_END
    | TOKEN_IN
    | TOKEN_LOCAL
    | TOKEN_SEMICOL
    | TOKEN_APPEND
    | TOKEN_LESSTHANEQ
    | TOKEN_LESSTHAN
    | TOKEN_NEQUAL
    | TOKEN_EQUAL
    | TOKEN_DIV
    | TOKEN_MULT
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_PRINT
    | TOKEN_ISE
    | TOKEN_TL
    | TOKEN_HD
    | TOKEN_NOT
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_NAME
    | TOKEN_NAT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Expr
    | NONTERM_AtomicE
    | NONTERM_Const
    | NONTERM_TypeName
    | NONTERM_Bindings
    | NONTERM_Binding
    | NONTERM_AppE
    | NONTERM_Type
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Main : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Absyn.expr) 
